
version: 2.1
orbs:
  secrethub: secrethub/cli@1.0.0
jobs:
  docker_build_belenios_tool:
    machine:
      image: 'ubuntu-2004:202010-01'    # recommended linux image - includes Ubuntu 16.04, docker 18.09.3, docker-compose 1.23.1
      # resource_class: medium
      # docker_layer_caching: true    # default - false # requires a Circle CI plan that includes [Docker layer caching feature]
    environment:
      DESIRED_DOCKER_TAG: 5.27.1
    steps:
      - checkout
      - secrethub/install
      - run:
          name: "Build Belenios provided [Dockerfile_base_environment] docker images - Belenios version 1.13"
          command: |
                    echo "Skipping this"
                    exit 0
                    pwd
                    ls -allh
                    mkdir -p /tmp/belenios-base-env/
                    git clone https://github.com/glondu/belenios /tmp/belenios-base-env/
                    cd /tmp/belenios-base-env/
                    git checkout 1.13
                    git checkout master
                    docker build -t beleni8s/base-env -f Dockerfile_base_environment .
      - run:
          name: "Prepare Build Belenios builder from base [Dockerfile_base_environment] docker image - Belenios version 1.13"
          command: |
                    echo "Skipping this"
                    exit 0
                    pwd
                    ls -allh
                    cd /tmp/belenios-base-env/

                    cat \<<EOF >./build.sh
                    #!/bin/bash

                    export BELENIOS_SRC_CODE="/belenios/src_code"
                    cd ${BELENIOS_SRC_CODE}
                    tree -a |head -n 30
                    ./opam-bootstrap.sh

                    # ---
                    # [./env.sh] is generated by [./opam-bootstrap.sh] ?
                    # ---
                    ls -allh .
                    tree -a |head -n 30
                    pwd
                    echo " oui c ca : [./env.sh]"
                    chmod a+rwx ./env.sh
                    cat ./env.sh
                    ls -allh ./env.sh


                    export PATH="/root/.belenios/bootstrap/bin:\$PATH"
                    export OPAMROOT=/root/.belenios/opam
                    eval $(opam env) && make minimal
                    EOF

                    chmod +x ./build.sh


                    cat \<<EOF >./Dockerfile_belenios_builder
                    FROM beleni8s/base-env

                    RUN mkdir -p /belenios/src_code

                    COPY build.sh /belenios
                    RUN chmod +x /belenios/build.sh

                    WORKDIR /belenios

                    CMD [ "/belenios/build.sh" ]
                    EOF

                    # --- #

                    cat \<<EOF >./docker-compose.belenios.yml
                    version: '3.7'

                    services:
                      belenios_backend_minimal:
                        image: quay.io/beleni8s/belenios_backend_minimal:0.0.1-provided
                        # command: --api --docker
                        container_name: belenios_backend_minimal_build
                        build:
                          context: ./
                          dockerfile: Dockerfile_belenios_builder
                          args:
                            - DEBIAN_BASE_IMAGE_TAG=stretch-slim
                        # ports:
                          # # only expose https to outside world
                          # - "443:443"   # SSL
                        command: /belenios/build.sh
                        # command: /bin/bash
                        # stdin_open: true
                        # tty: true
                        volumes:
                          - "$PWD/oci/builder/platform/minimal/belenios_sys_root:/belenios/src_code"

                    EOF

                    pwd
                    ls -alh

      - run:
          name: "Build Belenios builder from base [Dockerfile_base_environment] docker image - Belenios version 1.13"
          command: |
                    echo "Skipping this"
                    exit 0
                    pwd
                    ls -allh
                    cd /tmp/belenios-base-env/
                    docker-compose -f docker-compose.belenios.yml up -d belenios_backend_minimal
                    docker-compose logs -f belenios_backend_minimal

      - run:
          name: "Testing local docker installation"
          command: docker version
      - run: # print the name of the branch we're on
          name: "Prepare Docker build the belenios-tool"
          command: |
                    cd /home/circleci/project
                    pwd
                    ls -allh
                    # export DESIRED_DOCKER_TAG=$(git describe --match "[0-999].[0-999].[0-999]" --abbrev=0 --tags)
                    export DESIRED_DOCKER_TAG=$(git describe --abbrev=0 --tags)
                    export DESIRED_DOCKER_TAG="${DESIRED_DOCKER_TAG}-$(git rev-parse --short HEAD)"
                    # docker build -t "quay.io/gravitee-lab/cicd-orchestrator:${DESIRED_DOCKER_TAG}" --build-arg GIT_COMMIT=$(git rev-parse HEAD) -f ./Dockerfile

                    # --------------------
                    ./prepare.env.sh
      - run: # print the name of the branch we're on
          name: "Replace opam-bootstrap.sh with modified one for tests"
          command: |
                    echo "Skipped for now"
                    exit 0
                    cd /home/circleci/project
                    pwd
                    ls -allh

      - run: # print the name of the branch we're on
          name: "Check content of [opam-bootstrap.sh]"
          command: |
                    pwd
                    ls -allh
                    echo ''
                    echo ''
                    echo ''
                    cat -n $(pwd)/oci/builder/platform/minimal/belenios_sys_root/opam-bootstrap.sh
                    echo ''
                    echo ''
                    echo ''

      - run: # print the name of the branch we're on
          name: "Check --disable-sandboxing opam init option in [opam-bootstrap.sh]"
          command: |
                    pwd
                    ls -allh
                    echo ''
                    echo ''
                    cat -n $(pwd)/oci/builder/platform/minimal/belenios_sys_root/opam-bootstrap.sh | grep 'sandboxing'
      # ---
      # cache for the opam-repository which is hugeeee (omg)
      # ---
      - restore_cache:
          keys:
            - beleni8s-opam-repository-{{ .Branch }}-{{ checksum "oci/builder/platform/minimal/belenios_sys_root/opam-bootstrap.sh" }}
            - beleni8s-opam-repository

      - run: # print the name of the branch we're on
          name: "Docker build the belenios-tool"
          no_output_timeout: 30m
          command: |
                    pwd
                    ls -allh
                    ./build-belenios-tool-runner.sh
      # ---
      # cache for the opam-repository which is hugeeee (omg)
      # ---
      - save_cache:
          paths:
            - ~/.m2
          key: beleni8s-opam-repository-{{ .Branch }}-{{ checksum "oci/builder/platform/minimal/belenios_sys_root/opam-bootstrap.sh" }}
          when: always
      - run: # print the name of the branch we're on
          name: "Test running the belenios-tool"
          command: |
                    # --- #
                    # -- Now you can use the belenios tool runner (its only dependency is the 'libgmp-dev' debian package) :
                    docker exec -it belenios_tool_runtime_build bash -c "belenios-tool --version"

                    # ---
                    # Now, just like in https://github.com/glondu/belenios/blob/1.13/tests/tool/demo.sh
                    # --
                    # Setup election
                    export ELECTION_UUID=$(docker exec -it belenios_tool_runtime_build bash -c "belenios-tool generate-token")
                    echo
                    echo "=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+="
                    echo
                    echo " Example using Belenios Tool : generate the UUID of a new election"
                    echo
                    echo " Generated Election UUID is [$ELECTION_UUID]"
                    echo
                    echo "=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+="
                    echo
                    ./test-belenios-tool-runner.sh
                    cat ./demo-election-result.json | jq .
                    echo
                    echo "=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+="
                    echo
                    echo " Election Simulation finished !"
                    echo
                    echo "=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+="
                    echo
                    # --
                    #
                    # -- Builds the legacy server designed by the Belenios Team
                    docker-compose -f docker-compose.build.yml up -d belenios_backend_release_server
                    docker-compose -f docker-compose.build.yml logs -f belenios_backend_release_server

                    # -- Run the unit tests : a demo voting session will be performed
                    docker-compose -f docker-compose.build.yml up -d belenios_unit_tests
                    docker-compose -f docker-compose.build.yml logs -f belenios_unit_tests

workflows:
  version: 2.1
  build_belenios_tool:
    jobs:
      # - docker_build_and_push_approval:
          # type: approval
      - docker_build_belenios_tool
      # - docker_build_belenios_tool:
          # requires:
            # - docker_build_and_push_approval
          # context: cicd-orchestrator
          # filters:
            # branches:
              # ignore:
                # - master
                # - develop
                # # ---
                # - /^feature\/.*/
                # - /^support\/.*/
                # - /^bugfix\/.*/
                # - /^hotfix\/.*/
                # - /^release\/.*/
                # # ---
            # tags:
              # only:
                # - /^[0-9]+.[0-9]+.[0-9]+/
                # - /^[0-9]+.[0-9]+.[0-9]+-alpha/
                # - /^[0-9]+.[0-9]+.[0-9]+-beta/
